6.26
复习
1，函数的细节错误；
2，怎么定义一个函数，通过两个明确来完成：第一，这个功能的结果是什么？第二，这个功能实现过程中是否需要未知内容参与运算；
3，函数的重载；
4，数组；栈内存---存储的都是局部变量，而且变量所属作用域一旦结束，该变量就自动释放，更新快；
堆内存---存储的是数组和对象（其实数组就是对象），凡是new建立的都在堆中；特点：每一个实体都有首地址值；每一个变量都有默认初始值；
心得：其实还是地址的知识；指针-引用；

6.27
1,对数组操作最基本的动作就是存和取；核心思想：就是对角标的操作；
2，数组的应用：进制的转换，
3，面向对象概念与思想；特征：封装（private,protected,public），继承(extends)，多态；
4，（重点 ）局部变量与成员变量的特征；
心得：类，对象（属性，行为），new
5，封装的学习；setxxx,getxxx;
6, 构造函数：构建创造对象时调用的函数；
    特点：函数名与类名相同，不用定义返回值类型，没有具体的返回值，
    作用：可以给对象进行初始化；

6.28
一般函数和构造函数（与类同名）的区别？
->构造函数：对象创建时，就会调用与之对应的构造函数，对对象进行初始化；对象创建时，只调用一次；
->对象创建后，需要函数功能时才调用；对象创建后，可以被调用多次；
构造函数的重载：

6.30
1,this关键字：哪个对象调用了this所在的函数，this就代表哪个对象；this只能定义在构造函数的第一行，因为初始化动作要先执行；
2，static关键字：所谓静态就是指在编译后所分配的内存会一直存在，直到程序退出内存才会释放这个空间，也就是只要程序在运行，那么这块内存就会一直存在；
3，数据工具类；
4，单例设计模式；

7.1
1,单例设计模式；饿汉式and懒汉式；
  //饿汉式
  class Single
  {
     private static final Single s = new Single();
     private Single(){}
     public static Single getInstance()
     {
          return s ;
     }
   }

  //懒汉式
  class Single
  {
      private statice Single s = null;
      private Single(){}
      public static Single getInstance()
      {
          if(s==null)
               s = new Single();
           return s;
       }
   }
2，继承；（提高代码复用性；让类与类之间产生关系；为多态提供了前提）

7.4
1,继承：单继承和多继承；this  //本类，super；

7.6
1,什么是大数据；
2，子父类中成员函数的特点：覆盖；子父类中出现构造函数覆盖的时候，先在子类中寻找；
3，子父类中的构造函数；子类实例化过程；子类在构造对象时，发现，访问子类构造函数时，父类也运行了；原因是：在子类的构造函数中的第一行有一个默认的隐式语句-super（）；{就是来调用父类的构造函数}
4，巨顶层的类：Object

再验证昨天的例子，ExtendDemo2


7.7
1,复习昨天的继承，覆盖，子父类；
2，final关键字；
3，学习《疯狂JAVA讲义》；第一至三章；主要是复习了开发环境的搭建，java的基础语法等；
4，下载并安装MySQL；



7.8
1,安装Mysql失败，转战SQLserver；


7.13
1,抽象类；抽象类不能被实例化（不能new），因为调用抽象方法无意义；
2，interface（）；类与类之间是extends关系，类与接口之间是implements关系；
继承只能是单继承，但是接口可以多接口；接口与接口之间是继承关系，而且接口可以多继承；
3，多态：一个对象对应着不同类型；
   在代码中的体现：父类或者接口的引用指向其子类的对象；（一个对象，两种形态）
   好处：提高了代码的扩展性，前期定义的代码可以使用后期的内容；


7.14
1，多态的好处与弊端；多态使用的前提：必须有关系（继承   、实现），要有覆盖；
2，安装sql2008；
3，多态的转型（向上转型  父类 a = new 子类（）；向下   转型  子类 a1 = （子类）a1 ）；转型过程中，都是子   类  在变化，一会儿是父类型，一会儿是本类型；
4，多态类型的判断---instanceof；
5，JDBC概述；


7.15
1,Java数据库编程；
2，SQL语法基础（1）；

7.16
1,SQL语法基础（2）；create,select,update,alter,drop
2,JDBC操作；配置数据库的驱动程序；
3，初识报账程序；


7.17
1,用jdbc连接sql2008（测试成功）；
  步骤：（1）下载sqljdbc.jar,配置              环境变  量；
        （2）设置SQL2008配置，包括             ：登陆  方式为SQL              Server身份验证的方式             ；sql网络配置tcp/ip，             端口为1433；
        （3）在Eclipse中配置构建路             径，加   载sqljdbc.jar
        （4）新建测试程序类；
2，使用Statement方法 进行数据库的添加操作；


7.19
1,使用ResultSet方法，进行数据库的查询；


7.20
1,PreparedStatement接口；
2，clob对大对象的操作；
3，多态-成员变量,成员函数（重点）【编译看左边，运行看   右边】，静态函数；


7.21
1,内部类；
  访问特点：（1）内部类可以直接访问外部类中的成员；
            （2）外部类要访问内部类，必须建立内部类                 的对象；
  内部类直接访问外部类的方法：外部类名.this.xxx
  《疯狂java讲义》
2，break是跳出整个循环体；continue是忽略本次循环剩下     的语句，继续下一次循环；
3，数组的初始化；
4, 编写九九乘法表小程序；

	
7.22
1,异常：运行时发生的；
2,异常的处理方式：在java中用类的形式对不正常的情况（  异常）进行了描述和分装对象；以提高代码阅读性；	
3,异常体系，分成两大类：（1）一般不可处理的，Error
			（2）可以处理的，Exception
         特点：Throwable及其所有的子类都具有可抛性；
	       可抛性通过两个关键字体现：throws和                     throw；
   如果让一个类成为异常类，必须要extends Exception；
4，异常的分类：
   （1）编译时被检测到的异常：只要是Exception和其子类都        是，除了特殊子类RuntimeException体系；
   （2）运行时被检测到的异常：就是Exception中的                RuntimeException和其子体系；
    所以自定义异常类时，要么继承Exception，要么继承    RuntimeException；

7.23
1,异常处理的捕捉：
  形式：对异常进行针对性的处理；
  格式：
       try{
		需要被检测的异常代码
			}
	catch（异常类   变量）{
		处理异常的代码
			}
	finally{
		一定会被执行的代码    【常用于关闭（释         放资源），比如数据库连接是，在查询时如果出现异         常 ，需要关闭数据库连接】
		}
    注意：多catch时，父类的catch放在最下面；
2，自学JDK API；
3，下载java小程序，研究代码；

7.24
1,Object类；
  equals（）方法：指示其他某个对象是否与此对象“相等”  ；
  hashcode（）方法；
  getclass（）方法：返回此object的运行时类；
  toString（）方法：返回该对象的字符串表示；//可以重写  此方法
2，包（package）概述：对类文件分类管理；也是一种封装形                      式；
3，包-包之间的访问：被访问的包中的类必须是public的，被                      访问的包中的类的方法也必须是public                    的；
    protected保护权限的使用：只有继承，才能使用其方法；
    扩展（四种权限的使用范围）：
   private        public		protected	default			 
同一类中    ok             ok              ok           ok
同一包中    ok             ok              ok           
子类中      ok             ok              
不同包中    ok
    

7.26
1,包的导入-import；原则：用到哪个类，就导入哪个；
2，jar：java的压缩包；
3，多态的复习；


7.27
1,练习题总结：
  （1）非静态的内部类中不能定义静态成员；
  （2）静态只能覆盖静态；
  （3）继承中，子类的构造函数中一定有super（）这个方法；//如       果父类中没有空参构造函数，则编译失败；
  （4）覆盖的时候，要注意类型是否一致；//调用的不确定性；
  （5）多catch（）时，父类的catch（）要放在最下面；
2，图形（长方形和圆）面积接口的程序实现；
3，进程和线程；
   线程：就是进程中的一个负责程序执行的控制单元（执行路径）；


7.28
1,多线程；
  如何创建线程的第一种方式：
 （1）定义一个类extends Thread类；
 （2）覆盖（重写）Thread类中的run方法，在run（）中定义要运          行的任务代码；
 （3）直接创建Thread子类对象创建线程  ；
 （4）调用start（）开启线程并调用线程的任务run（）执行；
2，getName（）获取线程（对象）名称；
   currentThread（）返回当前正在执行的线程对象的引用；


7.29
1,创建线程的第二种方式（常用）：
 （1）定义一个类实现Runnable接口；
 （2）覆盖接口中的run（）；将线程的任务代码封装到run（）中；
 （3）通过Thread类创建线程对象，并将Runnable接口的子类对象作      为Thread类的构造函数的参数；（这是因为线程的任务都封装      在Runnable接口子类对象的run（）中，所以要在线程对象创建时就  必须明确要运行的任务；）
 （4）调用线程对象的start（）开启线程；
该方法的好处：
  （1）将线程的任务从线程的子类中分离出来；进行了单独的封装；
       安装面向对象的思想将任务封装成对象；
  （2）避免了java单继承的局限性；
2，多线程小例子-Sale_ticeksDemo；


7.30
1，多线程时出现的小问题（安全问题）：资源的抢占；
   解决方法：
            （1）同步代码块 synchronizede（obj）； object obj                   = new object（）；    【常用】
                 同步的前提：必须有多个线程并使用同一个锁；
             （2）同步函数；
  区别：二者用的什么锁；同步函数的锁是固定的this；同步代码块        的锁是任意的对象；建议使用同步代码块；
2，让线程停下来-sleep（xxx）；
3，BankDemo.java小例子；
4，多线程下的单例模式；
5，多线程中死锁的情况---同步的嵌套；
6，关键字 True 和False 对应于 Boolean 变量的两种状态；


7.31
1,线程间的通信； 

8,2
1,线程间通信-等待唤醒机制；
  涉及的方法：wait（）：让线程处于冻结状态，放入线程池中；
              notify（）：唤醒线程池中的一个线程（任意）；
              notifyAll（）：唤醒线程池中的所有线程；
  这些方法都必须定义在同步中，而且要明确到底操作的是哪个锁上  的线程；
2，多生产者和多消费者问题-day1；
   （ProducerConsumer_Demo程序问题未解决）...//因为在该包其他    类中已经定义了Resource类,所以不能再重复定义；


8.3
1,多生产者和多消费者问题-day2；   //P、V操作；
  //if判断一次，while判断多次；    while+notifyAll；
2，lock（）；




9.14
1,wait和sleep的区别；


10.9
1,常用对象API；
  （1）String类；

10.10
1,重写toString（）方法；
2，==和equals的区别：==判断两个变量是否相等时，如果两个变量是基本类型变量，且都是数值类型（不一定要求数据类型严格相同），则只要两个变量的值相等，就将返回true；对于两个引用类型变量，只有它们指向同一个对象时，==判断才会返回true，==不可用于比较类型上没有父子关系的两个对象。这个时候就需要用equals；（==比较的是地址）
3，final修饰符；


10.12
1,常用的对象API-String（构造方法）
2，StringBuffer；
    特点：1，长度可变；2，可以存储不同类型数据；3，最终要转成          字符串进行使用；4，可以对字符串进行修改；
3,基本数据类型对象包装类；
  特点：为了方便操作基本数据类型值，将其封装成对象，在对象中        定义了属性  和行为丰富了该数据的操作；
4，集合类
   用于封装特有数据，对象多了就需要存储，如果对象的个数不确定   ，就使用集合容器；
   特点：1，用于存储对象的容器；2，长度可变；3，不可以存储基         本数据类型值；
5，conllection（）；	



10.14
1, conllection（）的常见方法：
   添加（add）、删除（remove）、判断（contains）、获取  （iterator）

2，


10.17
1,网站建设(待学习，w3c)



10.19
1，大数据了解与学习
一个初级数据分析师应该掌握的技能：
（1）统计学基础；
（2）常用模型理论；
（3）R和PYTHON语言；
（4）网页分析；
（5）数据库分析；
（6）实战应用；
2，什么是大数据：数据体积大，数据类别大，处理速度快，真实性高；

10.21
1,重温面向对象这一章；
*对象是java的核心；
*首先定义类，才有对象；
2，引用：除基本类型外的变量类型都称为引用类型；
基础类型占一块内存，引用占两块；
对象是new出来的，位于堆内存，方法在代码区；


10.22
1,static;
2,jar -cvf  包名    源文件名；
3，super---父；this---本/子；
4，继承中如果使用构造方法，如果调用super，必须写在子类构造方法的第一行；
5，在使用子类构造方法时，必须先使用父类构造方法；
6，当子类调用构造方法时，没有写父类构造方法，则系统自动调用父类无参数的构造方法；



10.23
1，
*****父类引用指向子类对象时，看到的只是作为父类那一部分的属性和方法；也就是把子类对象当作父类来使用；如果子类中重写了父类中的一个方法，那么在调用这个方法的时候，将会调用子类中的这个方法；（动态连接、动态调用） 
2，instance0f来判断一个引用型变量所“指向”的对象是否属于该类或类的子类；
3，多态；
存在的三个必要条件：*要有继承；
		    *要有重写；
		    *父类引用指向子类对象； 
4，abstract抽象类；
  必须被继承，抽象方法必须被重写；抽象类不能被实例化；抽象方法只需声明，不需实现；
  （抽象的就是模糊的；）
5，final：可以修饰变量、方法、类；变量的值不能被改变，不能被重写，也不能被继承；
6，接口的出现：java只支持单继承；接口是抽象方法和常量值得定义的集合；接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义，而没有变量和方法的实现；接口中只能定义抽象方法，而且方法只能public；
多个无关类可以实现同一个接口；一个类可以实现多个无关的接口；


10.24
1,借了一些书，要多看看；
2，static的成员变量属于所有类，一般分配在data区域里面，不需要new对象就可以访问；

10.25
PYTHON
1,25个保留字；def：定义方法或函数；elif；from、import导入模块；
2，变量不需要声明，赋值就是声明和定义的过程；若为赋值就不能直接使用；
3，元组，tuple，“写保护”，支持负索引（末尾是-1，依次往前-2，-3......）；

10.26
1，数组；静态：int a[] = {x,y,z};动态：int a[]; a = new int[X];先定义（栈空间），再new（分配堆空间）；
java中声明数组时不能指定其长度； 
2，编程要认真，细心，


10.29
1,常用类；
  

10.30
1,枚举类型：
 ***只能够取特定值中的一个；
 **使用enum关键字；
 *是java.lang.Enum类型；
2，容器；
*Collection接口：set（不可重复），list（可重复）；
3,Iterator接口：迭代器，用以遍历容器内的元素； 
4，增强的for循环；
for（int i:arr）把arr里面的元素挨着放入i中；
5，包装类的自动装箱和拆箱；
6，泛型；在定义集合的时候同时定义集合中对象的类型；



11.1
1,IO包/类；（想象成插了一根管子来操作）
*InputStream
*OutputStream
*Reader
*Writer
(in 是读；out是写)  （！=-1   判断文件是否读到结尾；）
2，节点流：直接读直接写；
3，处理流：包在别的流上的流；
*缓冲流
4，数据流；
5，Object流；



11.2
1,statci关键字；
  被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。?
只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象；
2，Thread类；
*run（）；
*start()；
（区别方法调用和线程启动）尽量使用runnable接口；重写run（）；
3，线程同步；
***synchronized（this）：锁定当前对象；
4，生产者消费者程序学习；
5，wait和sleep的区别；
*wait时别的线程可以访问锁定对象；
*sleep时别的线程不可以访问锁定对象；


11.04
1,网络编程（Scoket）；
*IP：独一无二的ip地址；
*TCP(可靠)、UDP（不可靠）；

******<未解决问题：cmd不能运行程序>******


11.06
1,GUI编程；
**AWT：Component类哦（所有的可以显示出来的元素）和Container类（用来容纳其他component对象的容器；）
2，时间模型；
**事件监听


11.09
1,内部类；
好处：
*可以方便的访问包装类的成员；
*该类不允许或不需要其他类进行访问；
2，

11.11
1,Python的安装；
*********<未解决问题：eclipse配置Python>



11.19
1,解决eclipse配置Python的问题；
2，在每个程序最开始的地方加上【# -*- coding: UTF-8 -*-】；为了能够不产生乱码；
3，“基于R语言的QQ信息文本挖掘”报告学习；


11.20
1,正则表达式：定义了一个搜索匹配字符串的模式；
  涉及到的类:java.lang.String
	     java.util.regex.Pattern
             java.util.regex.Matcher
2,Chat0.3


11.22
1,Chat0.7

11.23
1,Chat1.0


11.24
1,Chat1.1


11.26
1,在线聊天程序学习完成：
*思路要清晰；
*各个类的用法；
*代码的规范；
*写好文档；



11.29
1,JDBC(java访问数据库的一个统一接口)--day1
2，JDBC的编程步骤；（严格要求）
3,JDBC对数据库的基本操作复习；最好使用lomboz_eclipse，因为它可以集成数据库显示；


12.4
1,JDBC--day2


12.6
1,JDBC--day3
2,PreparedStatement
  pstmt = conn.prepareStatement("insert into table_01 values (?,?,?)");
  pstmt.setInt(1,deptno );
  pstmt.setString(2, dname);
  pstmt.setString(3, dtel);
3,sql批处理--Batch	
4，Servlet（服务器小应用程序）--day1	
   *应用于B/S架构；
   *以线程方式运行；
   *一般在容器中运行；
   *常见的Servlet容器--Tomcat；


12,10
1，TankWar--day1
   完成版本0.1和0.2；
   匿名类的复习；
   匿名类的目的是在某个地方需要特殊的实现，因此在该处编写其实现，并获取     它的实例，调用它的方法。不要在匿名内部类编写其他的方法，是不可见的。
   形式为：new <类或接口> <类的主体>
   
   学到0.6；
   复习内部类的使用、常量
  *画图：paint（repaint调用）
2，TankWar--day2
   *掌握面向对象的思考方法：问题中有哪些类/对象-->类的属性-->类的方法（    首先是构造方法）
   *合适的方法应该出现在合适的类中； 

12.14
1,TankWar--day3


12.21
1,TankWar--day4
2,Debug学习；
  *断点；
  *step over
  *step in
3，成员变量首字母-小写；
4，碰撞检测的辅助类Rectangle；


12.24
1,跟着李老师复习：继承，多态；
2，TankWar--day5；

2016
1.8
1,TankWar--day6
(1)加入敌人坦克List；
（2）敌人坦克的移动，随机数的应用；

1.9
1，学习github的使用；
（1）简单了解github的作用；
（2）进行简单的操作；
2，python的复习；****************还需继续学习*****************；
